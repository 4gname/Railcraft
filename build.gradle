allprojects {
	apply plugin: 'java'
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
}

evaluationDependsOn(':version')

buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
	}
}

apply plugin: 'net.minecraftforge.gradle.forge'


group = "com.covertjaguar.railcraft" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Railcraft_" + project.version_minecraft

ext.apiRailcraft = "./api/railcraft"
// ext.apiForestry = "./api/forestry"
ext.apiRedstoneFlux = "./api/redstoneflux"
ext.apiThaumcraft = "./api/thaumcraft"
ext.apiBuildcraft = "./api/buildcraft"

ext.dirLang = "./lang"

ext.dirDest = './build/dist'

minecraft {
	version = project.version_minecraft + "-" + project.version_forge
	runDir = "run"
	
	mappings = project.version_mcp

	replace '@VERSION@', project.version
}

sourceSets {
	main {
		java {
			srcDir project.apiRailcraft
			// srcDir project.apiForestry
			srcDir project.apiRedstoneFlux + "/src/main/java"
			srcDir project.apiThaumcraft
		}
		resources {
			srcDir project.dirLang
            exclude '**/Thumbs.db'
		}
	}
    // Do bc seperatly because it includes the RF api itself
    bc_api {
        java {
            srcDir project.apiBuildcraft + "/api"
            exclude 'cofh/**'
        }
    }
}

repositories {
    maven {
        name = "forestry"
        url = "http://maven.ic2.player.to/"
    }
	maven {
		name = "ic2"
		url = "http://maven.ic2.player.to/"
	}
}

configurations {
	api
	compile.extendsFrom api
}

dependencies {
    compile "net.sengir.forestry:forestry_${1.9}:${project.version_forestry}:api"
    runtime "net.sengir.forestry:forestry_${1.9}:${project.version_forestry}:dev"
	//api 'net.industrial-craft:industrialcraft-2:2.2.780-experimental:api'
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "version_minecraft", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and version_minecraft
		expand 'version':project.version, 'version_minecraft':project.minecraft.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
		exclude '**/*.md'
	}
}

runClient {
	if( project.hasProperty('mcUsername') && project.hasProperty('mcPassword') ) {
		args "--username=${project.mcUsername}"
		args "--password=${project.mcPassword}"
	}
}

jar {
	destinationDir = file("build/tmp")
	archiveName = "main.jar"

    exclude '**/Thumbs.db'
    
	from {
		configurations.api.collect {
			it.isDirectory() ? it : zipTree(it).matching {
				include '**/api/**'
				exclude '**/buildcraft/api/blueprints/**'
				exclude '**/buildcraft/api/boards/**'
				exclude '**/buildcraft/api/events/**'
				exclude '**/buildcraft/api/facades/**'
				exclude '**/buildcraft/api/filler/**'
				exclude '**/buildcraft/api/fuels/**'
				exclude '**/buildcraft/api/gates/**'
				exclude '**/buildcraft/api/power/**'
				exclude '**/buildcraft/api/recipes/**'
				exclude '**/buildcraft/api/robots/**'
				exclude '**/ic2/api/crops/**'
				exclude '**/ic2/api/network/**'
				exclude '**/ic2/api/event/**'
				exclude '**/ic2/api/reactor/**'
				exclude '**/ic2/api/package-info.java'
				exclude '**/ic2/api/package-info.class'
			}
		}
	}

	into ('mods/railcraft/api') {
		from project.apiRailcraft + "/LICENSE.md"
	}
	// into ('forestry/api') {
		// from project.apiForestry + "/LICENSE.txt"
	// }
	into ('thaumcraft/api') {
		from project.apiThaumcraft + "/LICENSE"
	}
	into ('cofh/api') {
		from project.apiRedstoneFlux + "/LICENSE - LGPLv3.txt"
	}
}

// task mainJarSigned ( type: Jar, dependsOn: 'reobf' ) {
	// from (zipTree(jar.getArchivePath())) {
		// exclude '**/api/**'
	// }

	// duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	// destinationDir = file("build/tmp")
	// archiveName = "signed.jar"

	// doLast {
		// if (project.hasProperty('signingKeystore')) {
			// ant.signjar(jar: getArchivePath(),
				// alias: signingAlias,
				// keystore: signingKeystore,
				// storepass: signingStorepass)
		// } else if (project.hasProperty('signingAlias')) {
			// ant.signjar(jar: getArchivePath(),
				// alias: signingAlias,
				// storepass: signingStorepass)
		// } else {
			// println 'Signing disabled, gradle.properties is missing.'
		// }
	// }
// }

// task mainJar ( type: Zip, dependsOn: 'jar' ) {
	// from (zipTree(mainJarSigned.getArchivePath())) {
		// include '**'
	// }

	// from (zipTree(jar.getArchivePath())) {
		// include '**'
		// exclude '**/forestry/api/**'
		// exclude '**/uristqwerty/**'
	// }

	// duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	// destinationDir = file(dirDest)
	// includeEmptyDirs = false
	// extension = 'jar'
// }

// task devJarSigned ( type: Jar, dependsOn: 'classes' ) {
	// from(sourceSets.main.output) {
		// exclude '**/api/**'
	// }

	// destinationDir = file("build/tmp")
	// archiveName = "signed-dev.jar"

	// doLast {
		// if (project.hasProperty('signingKeystore')) {
			// ant.signjar(jar: getArchivePath(),
				// alias: signingAlias,
				// keystore: signingKeystore,
				// storepass: signingStorepass)
		// } else if (project.hasProperty('signingAlias')) {
			// ant.signjar(jar: getArchivePath(),
				// alias: signingAlias,
				// storepass: signingStorepass)
		// } else {
			// println 'Signing disabled, gradle.properties is missing.'
		// }
	// }
// }

task devJar ( type: Jar, dependsOn: 'classes' ) {
	// from (zipTree(devJarSigned.getArchivePath())) {
		// include '**'
	// }

	from(sourceSets.main.output) {
		include '**'
		exclude '**/forestry/api/**'
		exclude '**/uristqwerty/**'
	}

	from {
		configurations.api.collect {
			it.isDirectory() ? it : zipTree(it).matching {
				include '**/api/**'
				exclude '**/buildcraft/api/blueprints/**'
				exclude '**/buildcraft/api/boards/**'
				exclude '**/buildcraft/api/events/**'
				exclude '**/buildcraft/api/facades/**'
				exclude '**/buildcraft/api/filler/**'
				exclude '**/buildcraft/api/fuels/**'
				exclude '**/buildcraft/api/gates/**'
				exclude '**/buildcraft/api/power/**'
				exclude '**/buildcraft/api/recipes/**'
				exclude '**/buildcraft/api/robots/**'
				exclude '**/ic2/api/crops/**'
				exclude '**/ic2/api/network/**'
				exclude '**/ic2/api/event/**'
				exclude '**/ic2/api/reactor/**'
				exclude '**/ic2/api/package-info.java'
				exclude '**/ic2/api/package-info.class'
			}
		}
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	destinationDir = file(dirDest)
	extension = 'jar'

	classifier = 'dev'
}

class JarSigner extends net.minecraftforge.gradle.tasks.SignJar {
    public JarSigner () {
		onlyIf {
			project.hasProperty('signingStorepass')
		}

		alias = 'CovertJaguar'
		if(project.hasProperty('signingStorepass')) {
			storePass = project.signingStorepass
			keyPass = project.signingStorepass
			keyStore = System.getProperty("user.home") + '/.keystore'
		}
	}
}

task signMainJar(type: JarSigner, dependsOn: 'jar') {
	inputFile = jar.getArchivePath()
	outputFile = jar.getArchivePath()
}

task signDevJar(type: JarSigner, dependsOn: 'devJar') {
	inputFile = devJar.getArchivePath()
	outputFile = devJar.getArchivePath()
}

task apiZip ( type: Zip ) {
	from project.apiRailcraft
	destinationDir = file(dirDest)
	classifier = 'api'
	extension = 'zip'
}

task releaseInit << {
	println '*************************************************************'
	println 'This build will be version: ' +  rootProject.version
	println '*************************************************************'
}

task release << {
}

build.dependsOn signMainJar, signDevJar, apiZip
release.dependsOn releaseInit, build
build.shouldRunAfter releaseInit
release.shouldRunAfter uploadArchives

artifacts {
	archives jar, devJar, apiZip
}

idea.module.inheritOutputDirs = true

task wrapper(type: Wrapper) {
	gradleVersion = "2.7"
}
